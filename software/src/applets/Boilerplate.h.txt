// Copyright (c) 2024, _________
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

class MyApplet : public HemisphereApplet {
public:

    enum MyAppletCursor {
        PARAM1,
        PARAM2,

        CURSOR_LAST = PARAM2
    };

    const char* applet_name() {
        return "MyApplet";
    }

    void Start() {
      // Initialize default values
    }

    void Controller()
    {
        /*
         * basic example of checking triggers, reading inputs, quantizing, and setting outputs
         *
        ForEachChannel(ch)
        {
          if (Clock(ch))
          {
            int cv = In(ch);
            cv = Quantize(ch, cv); // uses global quantizer settings
            Out(ch, cv);
          }
        }
         */
    }

    void View() {
        DrawInterface();
    }

    /* The default encoder press action is to toggle editing.
     * You can override this for more complex behavior. */
    // void OnButtonPress() { }

    /* Pressing the select button after highlighting a parameter for editing
     * can invoke a secondary action here. By default, it just cancels editing. */
    // void AuxButton() { }

    void OnEncoderMove(int direction) {
        if (!EditMode()) {
            MoveCursor(cursor, direction, CURSOR_LAST);
            return;
        }

        // param LUT
        const struct { uint8_t &p; int min, max; } params[] = {
            { param1, 0, 63 }, // PARAM1
            { param2, 0, 63 }, // PARAM2
        };

        // adjust param
        params[cursor].p = constrain(params[cursor].p + direction, params[cursor].min, params[cursor].max);
    }

    uint64_t OnDataRequest() {
        uint64_t data = 0;
        Pack(data, PackLocation {0,8}, param1);
        Pack(data, PackLocation {8,8}, param2);
        return data;
    }

    void OnDataReceive(uint64_t data) {
        param1 = Unpack(data, PackLocation {0,8});
        param2 = Unpack(data, PackLocation {8,8});
    }

protected:
    void SetHelp() {
      // TODO
    }
    
private:
    int cursor;

    uint8_t param1;
    uint8_t param2;

    void DrawInterface() {

        int y = 14;
        gfxPrint(1, y, "p1: ");
        gfxPrint(param1);

        y += 11;
        gfxLine(4, y, 60, y); // ---------------------------------- //

        y += 3;
        gfxPrint(1, y, "p2: ");
        gfxPrint(param2);

        y += 11
        gfxIcon(32, y, ZAP_ICON);

    }

};
